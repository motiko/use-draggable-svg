{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["useDraggable","containerRef","onDragEnd","draggedSvg","useRef","dragOffset","draggedFrom","svgNode","x","parseFloat","y","to","from","current","evt","getMousePosition","CTM","d","useEffect","drag","startDrag","findFirstSvgParent","node","endDrag","App","console","log","viewBox","ref","fill","onMouseDown","onTouchStart","width","height","ReactDOM","render","document","getElementById"],"mappings":"wPA6BwBA,G,IACtBC,iBACAC,cAEMC,EAAaC,mBACbC,EAAaD,mBACbE,EAAcF,mBAsBpB,aACE,IAAMG,EAAeJ,EAArB,QACA,KAAa,CACX,IAAMK,EAAIC,WAAWF,sBAAXE,OAAV,EACMC,EAAID,WAAWF,sBAAXE,OAAV,EAKA,GACEP,EAAU,CAAES,GAAI,CAAEH,EAAF,EAAKE,KAAKE,KAAMN,EAAYO,UAGhDV,eAGF,cACE,UAAIA,QAAJ,IAAIA,KAAJ,QAAyB,CACvB,IAAMI,EAAeJ,EAArB,QACA,KAAa,CACXW,mBACA,MAAiBC,EAAjB,GAAQP,EAAR,IAAWE,EAAX,IACAH,0BAAkCC,EAAIH,UAAtCE,GACAA,0BAAkCG,EAAIL,UAAtCE,KAKN,cACE,GAAIN,EAAJ,QAA0B,CACxB,IAAMe,EAAMf,UAAZ,eACIO,EAAIM,EAAR,QACIJ,EAAII,EAAR,QAKA,GAJIA,EAAJ,UACEN,EAAIM,aAAJN,QACAE,EAAII,aAAJJ,SAEF,EACE,MAAO,CACLF,GAAIA,EAAIQ,EAAL,GAAcA,EADZ,EAELN,GAAIA,EAAIM,EAAL,GAAcA,EAAIC,GAI3B,MAAO,CAAET,EAAF,EAAQE,EAAG,GAGpB,OApEAQ,qBAAU,WACJjB,EAAJ,UACEA,0CACAA,0CACAA,wCACAA,6CA+DG,CAAEkB,KAAF,EAAQC,UA3Df,YACE,GAAIN,EAAJ,OAAgB,CACd,MAAiBC,EAAjB,GAAQP,EAAR,IAAWE,EAAX,IACAJ,UAAsB,CAAEE,EAAF,EAAKE,KAC3BL,UAAqB,CAAEG,EAAF,EAAKE,KAC1BP,UA3BN,SAASkB,EAAmBC,GAC1B,cAAIA,WAAgCA,EACpC,OAAIA,aAAiC,KAC9BD,EAAmBC,EAA1B,YAwByBD,CAAmBP,EAAxCX,QACA,IAAMI,EAAeJ,EAArB,QACAE,aAAwBI,WAAWF,sBAAnCF,MACAA,aAAwBI,WAAWF,sBAAnCF,QAmDsBkB,YC5DbC,EAxCH,WACV,IAAMvB,EAAeG,mBACbgB,EAAcpB,EAAa,CACjCC,eACAC,UAAW,gBAAGU,EAAH,EAAGA,KAAMD,EAAT,EAASA,GAAT,OAAkBc,QAAQC,IAAId,EAAMD,MAFzCS,UAKR,OACE,yBAAKO,QAAQ,YAAYC,IAAK3B,EAAc4B,KAAK,aAC/C,yBACEC,YAAaV,EACbW,aAAcX,EACdO,QAAQ,cACRnB,EAAE,KACFE,EAAE,KAEF,0BAAMsB,MAAM,KAAKC,OAAO,KAAKJ,KAAK,gBAEpC,yBACEC,YAAaV,EACbW,aAAcX,EACdO,QAAQ,cACRnB,EAAE,IACFE,EAAE,KAEF,0BAAMsB,MAAM,KAAKC,OAAO,KAAKJ,KAAK,aAEpC,yBACEC,YAAaV,EACbW,aAAcX,EACdO,QAAQ,cACRnB,EAAE,KACFE,EAAE,KAEF,0BAAMsB,MAAM,KAAKC,OAAO,KAAKJ,KAAK,Y,OChC1CK,EAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.af61ad08.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react'\n\nimport type { RefObject } from 'react'\ntype NodeInHtml = Node & ParentNode\n\nexport interface Coords {\n  x: number\n  y: number\n}\n\ninterface Props {\n  containerRef: RefObject<SVGGraphicsElement>\n  onDragEnd?: ({ from, to }: { from: Coords; to: Coords }) => void\n}\n\ntype EventHandler = (evt: any) => void\n\ninterface ReturnObject {\n  startDrag: EventHandler\n  drag: EventHandler\n  endDrag: EventHandler\n}\n\nfunction findFirstSvgParent(node: NodeInHtml): any {\n  if (node.nodeName === 'svg') return node\n  if (node.parentNode === null) return null\n  return findFirstSvgParent(node.parentNode)\n}\n\nexport default function useDraggable({\n  containerRef,\n  onDragEnd\n}: Props): ReturnObject {\n  const draggedSvg = useRef<any>()\n  const dragOffset = useRef<any>()\n  const draggedFrom = useRef<any>()\n  useEffect(() => {\n    if (containerRef.current) {\n      containerRef.current.addEventListener('mousemove', drag)\n      containerRef.current.addEventListener('touchmove', drag)\n      containerRef.current.addEventListener('mouseup', endDrag)\n      containerRef.current.addEventListener('touchend', endDrag)\n    }\n  })\n\n  function startDrag(evt: MouseEvent & TouchEvent) {\n    if (evt.target) {\n      const { x, y } = getMousePosition(evt)\n      draggedFrom.current = { x, y }\n      dragOffset.current = { x, y }\n      draggedSvg.current = findFirstSvgParent(evt.target as NodeInHtml)\n      const svgNode: any = draggedSvg.current\n      dragOffset.current.x -= parseFloat(svgNode.getAttributeNS(null, 'x'))\n      dragOffset.current.y -= parseFloat(svgNode.getAttributeNS(null, 'y'))\n    }\n  }\n\n  function endDrag(): void {\n    const svgNode: any = draggedSvg.current\n    if (svgNode) {\n      const x = parseFloat(svgNode.getAttributeNS(null, 'x')) || 0\n      const y = parseFloat(svgNode.getAttributeNS(null, 'y')) || 0\n      // svgNode.setAttributeNS(null, 'x', Math.round(x))\n      // svgNode.setAttributeNS(null, 'y', Math.round(y))\n      // svgNode.setAttributeNS(null, 'x', x)\n      // svgNode.setAttributeNS(null, 'y', y)\n      if (onDragEnd) {\n        onDragEnd({ to: { x, y }, from: draggedFrom.current })\n      }\n    }\n    draggedSvg.current = null\n  }\n\n  function drag(evt: MouseEvent & TouchEvent) {\n    if (draggedSvg?.current) {\n      const svgNode: any = draggedSvg.current\n      if (svgNode) {\n        evt.preventDefault()\n        const { x, y } = getMousePosition(evt)\n        svgNode.setAttributeNS(null, 'x', x - dragOffset.current.x)\n        svgNode.setAttributeNS(null, 'y', y - dragOffset.current.y)\n      }\n    }\n  }\n\n  function getMousePosition(evt: MouseEvent & TouchEvent): Coords {\n    if (containerRef.current) {\n      const CTM = containerRef.current.getScreenCTM()\n      let x = evt.clientX\n      let y = evt.clientY\n      if (evt.touches) {\n        x = evt.touches[0].clientX\n        y = evt.touches[0].clientY\n      }\n      if (CTM) {\n        return {\n          x: (x - CTM.e) / CTM.a,\n          y: (y - CTM.f) / CTM.d\n        }\n      }\n    }\n    return { x: 0, y: 0 }\n  }\n\n  return { drag, startDrag, endDrag }\n}\n","import React, { useRef } from 'react'\n\nimport useDraggable from 'use-draggable-svg'\n\nconst App = () => {\n  const containerRef = useRef<any>()\n  const { startDrag } = useDraggable({\n    containerRef,\n    onDragEnd: ({ from, to }) => console.log(from, to)\n  })\n\n  return (\n    <svg viewBox='0 0 30 20' ref={containerRef} fill=\"lightgray\">\n      <svg\n        onMouseDown={startDrag}\n        onTouchStart={startDrag}\n        viewBox='0 0 300 200'\n        x='10'\n        y='3'\n      >\n        <rect width='20' height='30' fill='lightgreen' />\n      </svg>\n      <svg\n        onMouseDown={startDrag}\n        onTouchStart={startDrag}\n        viewBox='0 0 300 200'\n        x='4'\n        y='5'\n      >\n        <rect width='50' height='50' fill='skyblue' />\n      </svg>\n      <svg\n        onMouseDown={startDrag}\n        onTouchStart={startDrag}\n        viewBox='0 0 300 200'\n        x='18'\n        y='5'\n      >\n        <rect width='30' height='20' fill='gray' />\n      </svg>\n    </svg>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}